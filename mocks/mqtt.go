// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mqtt "github.com/eclipse/paho.mqtt.golang"
	mock "github.com/stretchr/testify/mock"
)

// MQTTClient is an autogenerated mock type for the MQTTClient type
type MQTTClient struct {
	mock.Mock
}

// AddRoute provides a mock function with given fields: topic, callback
func (_m *MQTTClient) AddRoute(topic string, callback mqtt.MessageHandler) {
	_m.Called(topic, callback)
}

// Connect provides a mock function with given fields:
func (_m *MQTTClient) Connect() mqtt.Token {
	ret := _m.Called()

	var r0 mqtt.Token
	if rf, ok := ret.Get(0).(func() mqtt.Token); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mqtt.Token)
		}
	}

	return r0
}

// Disconnect provides a mock function with given fields: quiesce
func (_m *MQTTClient) Disconnect(quiesce uint) {
	_m.Called(quiesce)
}

// IsConnected provides a mock function with given fields:
func (_m *MQTTClient) IsConnected() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsConnectionOpen provides a mock function with given fields:
func (_m *MQTTClient) IsConnectionOpen() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OptionsReader provides a mock function with given fields:
func (_m *MQTTClient) OptionsReader() mqtt.ClientOptionsReader {
	ret := _m.Called()

	var r0 mqtt.ClientOptionsReader
	if rf, ok := ret.Get(0).(func() mqtt.ClientOptionsReader); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(mqtt.ClientOptionsReader)
	}

	return r0
}

// Publish provides a mock function with given fields: topic, qos, retained, payload
func (_m *MQTTClient) Publish(topic string, qos byte, retained bool, payload interface{}) mqtt.Token {
	ret := _m.Called(topic, qos, retained, payload)

	var r0 mqtt.Token
	if rf, ok := ret.Get(0).(func(string, byte, bool, interface{}) mqtt.Token); ok {
		r0 = rf(topic, qos, retained, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mqtt.Token)
		}
	}

	return r0
}

// Subscribe provides a mock function with given fields: topic, qos, callback
func (_m *MQTTClient) Subscribe(topic string, qos byte, callback mqtt.MessageHandler) mqtt.Token {
	ret := _m.Called(topic, qos, callback)

	var r0 mqtt.Token
	if rf, ok := ret.Get(0).(func(string, byte, mqtt.MessageHandler) mqtt.Token); ok {
		r0 = rf(topic, qos, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mqtt.Token)
		}
	}

	return r0
}

// SubscribeMultiple provides a mock function with given fields: filters, callback
func (_m *MQTTClient) SubscribeMultiple(filters map[string]byte, callback mqtt.MessageHandler) mqtt.Token {
	ret := _m.Called(filters, callback)

	var r0 mqtt.Token
	if rf, ok := ret.Get(0).(func(map[string]byte, mqtt.MessageHandler) mqtt.Token); ok {
		r0 = rf(filters, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mqtt.Token)
		}
	}

	return r0
}

// Unsubscribe provides a mock function with given fields: topics
func (_m *MQTTClient) Unsubscribe(topics ...string) mqtt.Token {
	_va := make([]interface{}, len(topics))
	for _i := range topics {
		_va[_i] = topics[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 mqtt.Token
	if rf, ok := ret.Get(0).(func(...string) mqtt.Token); ok {
		r0 = rf(topics...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mqtt.Token)
		}
	}

	return r0
}
